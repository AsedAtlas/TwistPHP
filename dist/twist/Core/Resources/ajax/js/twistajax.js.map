{"version":3,"file":"twistajax.js","sources":["../../../../../../node_modules/form-serialize/index.js","../../../../../../src/ajax/js/twistajax.js"],"sourcesContent":["// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i;\n\n// node names which could be successful controls\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;\n\n// Matches bracket notation.\nvar brackets = /(\\[[^\\[\\]]*\\])/g;\n\n// serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\nfunction serialize(form, options) {\n    if (typeof options != 'object') {\n        options = { hash: !!options };\n    }\n    else if (options.hash === undefined) {\n        options.hash = true;\n    }\n\n    var result = (options.hash) ? {} : '';\n    var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);\n\n    var elements = form && form.elements ? form.elements : [];\n\n    //Object store each radio and set if it's empty or not\n    var radio_store = Object.create(null);\n\n    for (var i=0 ; i<elements.length ; ++i) {\n        var element = elements[i];\n\n        // ingore disabled fields\n        if ((!options.disabled && element.disabled) || !element.name) {\n            continue;\n        }\n        // ignore anyhting that is not considered a success field\n        if (!k_r_success_contrls.test(element.nodeName) ||\n            k_r_submitter.test(element.type)) {\n            continue;\n        }\n\n        var key = element.name;\n        var val = element.value;\n\n        // we can't just use element.value for checkboxes cause some browsers lie to us\n        // they say \"on\" for value when the box isn't checked\n        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n            val = undefined;\n        }\n\n        // If we want empty elements\n        if (options.empty) {\n            // for checkbox\n            if (element.type === 'checkbox' && !element.checked) {\n                val = '';\n            }\n\n            // for radio\n            if (element.type === 'radio') {\n                if (!radio_store[element.name] && !element.checked) {\n                    radio_store[element.name] = false;\n                }\n                else if (element.checked) {\n                    radio_store[element.name] = true;\n                }\n            }\n\n            // if options empty is true, continue only if its radio\n            if (val == undefined && element.type == 'radio') {\n                continue;\n            }\n        }\n        else {\n            // value-less fields are ignored unless options.empty is true\n            if (!val) {\n                continue;\n            }\n        }\n\n        // multi select boxes\n        if (element.type === 'select-multiple') {\n            val = [];\n\n            var selectOptions = element.options;\n            var isSelectedOptions = false;\n            for (var j=0 ; j<selectOptions.length ; ++j) {\n                var option = selectOptions[j];\n                var allowedEmpty = options.empty && !option.value;\n                var hasValue = (option.value || allowedEmpty);\n                if (option.selected && hasValue) {\n                    isSelectedOptions = true;\n\n                    // If using a hash serializer be sure to add the\n                    // correct notation for an array in the multi-select\n                    // context. Here the name attribute on the select element\n                    // might be missing the trailing bracket pair. Both names\n                    // \"foo\" and \"foo[]\" should be arrays.\n                    if (options.hash && key.slice(key.length - 2) !== '[]') {\n                        result = serializer(result, key + '[]', option.value);\n                    }\n                    else {\n                        result = serializer(result, key, option.value);\n                    }\n                }\n            }\n\n            // Serialize if no selected options and options.empty is true\n            if (!isSelectedOptions && options.empty) {\n                result = serializer(result, key, '');\n            }\n\n            continue;\n        }\n\n        result = serializer(result, key, val);\n    }\n\n    // Check for all empty radio buttons and serialize them with key=\"\"\n    if (options.empty) {\n        for (var key in radio_store) {\n            if (!radio_store[key]) {\n                result = serializer(result, key, '');\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction parse_keys(string) {\n    var keys = [];\n    var prefix = /^([^\\[\\]]*)/;\n    var children = new RegExp(brackets);\n    var match = prefix.exec(string);\n\n    if (match[1]) {\n        keys.push(match[1]);\n    }\n\n    while ((match = children.exec(string)) !== null) {\n        keys.push(match[1]);\n    }\n\n    return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n    if (keys.length === 0) {\n        result = value;\n        return result;\n    }\n\n    var key = keys.shift();\n    var between = key.match(/^\\[(.+?)\\]$/);\n\n    if (key === '[]') {\n        result = result || [];\n\n        if (Array.isArray(result)) {\n            result.push(hash_assign(null, keys, value));\n        }\n        else {\n            // This might be the result of bad name attributes like \"[][foo]\",\n            // in this case the original `result` object will already be\n            // assigned to an object literal. Rather than coerce the object to\n            // an array, or cause an exception the attribute \"_values\" is\n            // assigned as an array.\n            result._values = result._values || [];\n            result._values.push(hash_assign(null, keys, value));\n        }\n\n        return result;\n    }\n\n    // Key is an attribute name and can be assigned directly.\n    if (!between) {\n        result[key] = hash_assign(result[key], keys, value);\n    }\n    else {\n        var string = between[1];\n        // +var converts the variable into a number\n        // better than parseInt because it doesn't truncate away trailing\n        // letters and actually fails if whole thing is not a number\n        var index = +string;\n\n        // If the characters between the brackets is not a number it is an\n        // attribute name and can be assigned directly.\n        if (isNaN(index)) {\n            result = result || {};\n            result[string] = hash_assign(result[string], keys, value);\n        }\n        else {\n            result = result || [];\n            result[index] = hash_assign(result[index], keys, value);\n        }\n    }\n\n    return result;\n}\n\n// Object/hash encoding serializer.\nfunction hash_serializer(result, key, value) {\n    var matches = key.match(brackets);\n\n    // Has brackets? Use the recursive assignment function to walk the keys,\n    // construct any missing objects in the result tree and make the assignment\n    // at the end of the chain.\n    if (matches) {\n        var keys = parse_keys(key);\n        hash_assign(result, keys, value);\n    }\n    else {\n        // Non bracket notation can make assignments directly.\n        var existing = result[key];\n\n        // If the value has been assigned already (for instance when a radio and\n        // a checkbox have the same name attribute) convert the previous value\n        // into an array before pushing into it.\n        //\n        // NOTE: If this requirement were removed all hash creation and\n        // assignment could go through `hash_assign`.\n        if (existing) {\n            if (!Array.isArray(existing)) {\n                result[key] = [ existing ];\n            }\n\n            result[key].push(value);\n        }\n        else {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\n// urlform encoding serializer\nfunction str_serialize(result, key, value) {\n    // encode newlines as \\r\\n cause the html spec says so\n    value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n    value = encodeURIComponent(value);\n\n    // spaces should be '+' rather than '%20'.\n    value = value.replace(/%20/g, '+');\n    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;\n","/*!\n * TwistPHP - An open source PHP MVC framework built from the ground up.\n * Shadow Technologies Ltd.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @author     Shadow Technologies Ltd. <contact@shadow-technologies.co.uk>\n * @license    https://www.gnu.org/licenses/gpl.html GPL License\n * @link       https://twistphp.com\n */\n\nimport serialize from '../../../node_modules/form-serialize/index';\n\nexport default class twistajax {\n\tconstructor( uri = '' ) {\n\t\tthis.uri = uri.replace( /\\/$/, '' );\n\t\tthis.cache = false;\n\t\tthis.requests = [];\n\t\tthis.debug = false;\n\t\tthis.events = {};\n\n\t\tif( !window.twist ) {\n\t\t\twindow.twist = {ajax: {instances: []}};\n\t\t} else if( !window.twist.ajax ) {\n\t\t\twindow.twist.ajax = {instances: []};\n\t\t}\n\n\t\tthis.on( 'request', request => {\n\t\t\tif( window.twist.debug ) {\n\t\t\t\twindow.twist.debug.logAJAX( request );\n\t\t\t} else if( this.debug ) {\n\t\t\t\tconsole.info( 'New AJAX Request', request );\n\t\t\t}\n\t\t} )\n\t\t\t\t.on( 'response', request => {\n\t\t\t\t\tif( window.twist.debug &&\n\t\t\t\t\t\t\trequest.$debug ) {\n\t\t\t\t\t\trequest.$debug\n\t\t\t\t\t\t\t\t.querySelector( '.details' )\n\t\t\t\t\t\t\t\t.outerHTML = '<pre>' + JSON.stringify( {response: request.response}, undefined, 2 ) + '</pre>';\n\t\t\t\t\t} else if( this.debug ) {\n\t\t\t\t\t\t//TODO: DEBUG OLD SKOOL\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t\t.on( 'success', request => {\n\t\t\t\t\tif( window.twist.debug &&\n\t\t\t\t\t\t\trequest.$debug ) {\n\t\t\t\t\t\tif( request.$debug.getAttribute( 'class' ) === 'twist-debug-box-' ) {\n\t\t\t\t\t\t\trequest.$debug.classList.remove( 'twist-debug-box-' );\n\t\t\t\t\t\t\trequest.$debug.classList.add( 'twist-debug-box-green' );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( this.debug ) {\n\t\t\t\t\t\t//TODO: DEBUG OLD SKOOL\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t\t.on( 'fail', request => {\n\t\t\t\t\tif( window.twist.debug &&\n\t\t\t\t\t\t\trequest.$debug ) {\n\t\t\t\t\t\tif( request.$debug.getAttribute( 'class' ) === 'twist-debug-box-' ) {\n\t\t\t\t\t\t\trequest.$debug.classList.remove( 'twist-debug-box-' );\n\t\t\t\t\t\t\trequest.$debug.classList.add( 'twist-debug-box-yellow' );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( this.debug ) {\n\t\t\t\t\t\t//TODO: DEBUG OLD SKOOL\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t\t.on( 'error', request => {\n\t\t\t\t\tif( window.twist.debug &&\n\t\t\t\t\t\t\trequest.$debug ) {\n\t\t\t\t\t\tif( request.$debug.getAttribute( 'class' ) === 'twist-debug-box-' ) {\n\t\t\t\t\t\t\trequest.$debug.classList.remove( 'twist-debug-box-' );\n\t\t\t\t\t\t\trequest.$debug.classList.add( 'twist-debug-box-red' );\n\t\t\t\t\t\t\tlet domError = document.createElement( 'pre' );\n\t\t\t\t\t\t\tdomError.innerHTML = 'Error: ' + request.error;\n\t\t\t\t\t\t\tlet domDetails = request.$debug.querySelector( '.details' );\n\t\t\t\t\t\t\tdomDetails.parentNode.replaceChild( domError, domDetails );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( this.debug ) {\n\t\t\t\t\t\t//TODO: DEBUG OLD SKOOL\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\twindow.twist.ajax.instances.push( this );\n\t}\n\n\tdelete( location, data = {} ) {\n\t\treturn this.send( location, data, 'DELETE' );\n\t}\n\n\tget( location ) {\n\t\treturn this.send( location, {}, 'GET' );\n\t}\n\n\thead( location ) {\n\t\treturn this.send( location, {}, 'HEAD' );\n\t}\n\n\tpatch( location, data = {} ) {\n\t\treturn this.send( location, data, 'PATCH' );\n\t}\n\n\tpost( location, data = {} ) {\n\t\treturn this.send( location, data, 'POST' );\n\t}\n\n\tput( location, data = {} ) {\n\t\treturn this.send( location, data, 'PUT' );\n\t}\n\n\tpostForm( location, formSelector ) {\n\t\tlet data = serialize( document.querySelector( formSelector ), {empty: true} );\n\t\treturn this.post( location, data );\n\t}\n\n\ton( event, callback ) {\n\t\tif( !this.events[event] ) {\n\t\t\tthis.events[event] = [];\n\t\t}\n\n\t\tthis.events[event].push( callback );\n\n\t\treturn this;\n\t}\n\n\ttrigger( event, context ) {\n\t\tif( this.events[event] ) {\n\t\t\tfor( let callbackEvent of this.events[event] ) {\n\t\t\t\tcallbackEvent.call( this, context );\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsend( location, bodydata = {}, method = 'GET' ) {\n\t\tlet fetchOptions = {\n\t\t\tmethod: method,\n\t\t\tcredentials: 'same-origin',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json, text/plain, */*',\n\t\t\t\t'Content-Type': 'application/json; charset=utf-8',\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t\t},\n\t\t\tcache: this.cache ? 'default' : 'no-store'\n\t\t};\n\n\t\tif( method !== 'GET' ) {\n\t\t\tfetchOptions.body = JSON.stringify( bodydata );\n\t\t}\n\n\t\tlet request = {\n\t\t\turl: this.uri + '/' + location,\n\t\t\toptions: fetchOptions\n\t\t};\n\n\t\trequest.instance = new Promise( ( resolve, reject ) => {\n\t\t\tfetch( this.uri + '/' + location, fetchOptions )\n\t\t\t\t\t.then( response => {\n\t\t\t\t\t\tif( response.ok ) {\n\t\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t\t\t.then( response => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\treturn JSON.parse( response );\n\t\t\t\t\t\t\t\t\t\t} catch( e ) {\n\t\t\t\t\t\t\t\t\t\t\tlet expectedFields = '(\"status\" ?: ?(true|false)?|\"message\" ?: ?\".*\"|\"data\" ?: ?(\\\\{.*\\\\}|\\\\[.*\\\\]))',\n\t\t\t\t\t\t\t\t\t\t\t\t\tregex = new RegExp( '\\{(' + expectedFields + ' ?, ?){2}' + expectedFields + '\\}', 'g' ),\n\t\t\t\t\t\t\t\t\t\t\t\t\tmatches = regex.exec( response );\n\n\t\t\t\t\t\t\t\t\t\t\tif( matches !== null ) {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'Broken AJAX response parsed' );\n\t\t\t\t\t\t\t\t\t\t\t\treturn JSON.parse( matches[0] );\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t.catch( e => {\n\t\t\t\t\t\t\t\t\t\tthrow(e);\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow(response.status + ' ' + response.statusText);\n\t\t\t\t\t\t}\n\t\t\t\t\t} )\n\t\t\t\t\t.then( response => {\n\t\t\t\t\t\trequest.response = response;\n\n\t\t\t\t\t\tthis.trigger( 'response', request );\n\n\t\t\t\t\t\tif( response.status !== true ) {\n\t\t\t\t\t\t\tthis.trigger( 'fail', request );\n\t\t\t\t\t\t\tthrow(response.message || 'AJAX status returned FALSE');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.trigger( 'success', request );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve( response.data );\n\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t} )\n\t\t\t\t\t.catch( e => {\n\t\t\t\t\t\trequest.error = e;\n\n\t\t\t\t\t\tthis.trigger( 'error', request );\n\n\t\t\t\t\t\treject( e );\n\t\t\t\t\t} );\n\t\t} );\n\n\t\tthis.requests.push( request );\n\n\t\tthis.trigger( 'request', request );\n\n\t\treturn request.instance;\n\t}\n}\n"],"names":["k_r_submitter","k_r_success_contrls","brackets","hash_serializer","result","key","value","match","hash_assign","keys","length","shift","between","Array","isArray","push","_values","string","index","isNaN","children","RegExp","exec","parse_keys","existing","str_serialize","replace","encodeURIComponent","form","options","hash","undefined","serializer","elements","radio_store","Object","create","i","element","disabled","name","test","nodeName","type","val","checked","empty","selectOptions","isSelectedOptions","j","option","allowedEmpty","hasValue","selected","slice","uri","cache","requests","debug","events","window","twist","ajax","instances","on","logAJAX","request","_this","info","$debug","querySelector","outerHTML","JSON","stringify","response","getAttribute","classList","remove","add","domError","document","createElement","innerHTML","error","domDetails","parentNode","replaceChild","this","location","data","send","formSelector","serialize","post","event","callback","context","call","bodydata","method","fetchOptions","body","instance","Promise","resolve","reject","_this2","then","ok","text","parse","e","expectedFields","matches","warn","catch","status","statusText","trigger","message"],"mappings":"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"}